{# Template for creating a service that exposes both FastAPI REST endpoints and MCP tools #}
{# @tags: code, api, mcp, fastapi, fastapi-mcp #}
{# @description: This template is used to generate a service that exposes functionality as both REST API endpoints and MCP tools using FastAPI and FastAPI-MCP #}
{# @variables: service_name:str, service_description:str, endpoints:list, models:list, version:str #}
{# @examples: [{"service_name": "Memory Service", "service_description": "A service for managing memory storage and retrieval", "endpoints": [{"name": "add_memory", "path": "/memories", "method": "POST", "description": "Add a new memory", "parameters": [{"name": "text", "type": "str", "description": "The text content of the memory"}, {"name": "metadata", "type": "dict", "description": "Additional metadata for the memory"}], "returns": {"type": "dict", "description": "The created memory with ID"}}], "models": [{"name": "Memory", "description": "A memory item", "fields": [{"name": "id", "type": "str", "required": true, "description": "Unique identifier"}, {"name": "text", "type": "str", "required": true, "description": "Text content"}, {"name": "metadata", "type": "dict", "required": false, "description": "Additional metadata"}]}], "version": "0.1.0"}] #}
#!/usr/bin/env python3
"""
{{ service_description }}

This module provides a service that exposes functionality as both REST API endpoints
and MCP tools using FastAPI and FastAPI-MCP.

Version: {{ version }}
"""

import logging
from typing import Dict, List, Any, Optional, Union
from fastapi import FastAPI, APIRouter, HTTPException, Depends
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel, Field
import uvicorn
from fastapi_mcp import FastApiMCP

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# Create FastAPI app
app = FastAPI(
    title="{{ service_name }}",
    description="{{ service_description }}",
    version="{{ version }}"
)

# Add CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Create router
router = APIRouter()

{% if models %}
# Define models
{% for model in models %}
class {{ model.name }}(BaseModel):
    """{{ model.description }}"""
    {% for field in model.fields %}
    {{ field.name }}: {% if not field.required %}Optional[{% endif %}{{ field.type }}{% if not field.required %}]{% endif %} = Field(
        {% if not field.required %}None{% else %}...{% endif %},
        description="{{ field.description }}"
    )
    {% endfor %}
{% endfor %}
{% endif %}

{% if endpoints %}
# Define endpoints
{% for endpoint in endpoints %}
@router.{{ endpoint.method|lower }}("{{ endpoint.path }}", tags=["{{ endpoint.name }}"])
async def {{ endpoint.name }}(
    {% for param in endpoint.parameters %}
    {{ param.name }}: {{ param.type }}{% if not loop.last %}, {% endif %}
    {% endfor %}
):
    """{{ endpoint.description }}
    
    {% for param in endpoint.parameters %}
    Args:
        {{ param.name }}: {{ param.description }}
    {% endfor %}
    
    Returns:
        {{ endpoint.returns.description }}
    """
    try:
        # Implementation goes here
        logger.info(f"Processing {{ endpoint.name }} request")
        
        # Example implementation
        result = {
            {% for param in endpoint.parameters %}
            "{{ param.name }}": {{ param.name }}{% if not loop.last %},{% endif %}
            {% endfor %}
        }
        
        return result
    except Exception as e:
        logger.error(f"Error in {{ endpoint.name }}: {e}")
        raise HTTPException(status_code=500, detail=str(e))
{% endfor %}
{% endif %}

# Include router in app
app.include_router(router)

# Create MCP server from FastAPI app
mcp = FastApiMCP(app)

# Mount MCP server to FastAPI app
mcp.mount()

def start_server(host: str = "0.0.0.0", port: int = 8000):
    """Start the server.
    
    Args:
        host: Host to bind to
        port: Port to bind to
    """
    uvicorn.run(app, host=host, port=port)

if __name__ == "__main__":
    start_server()
