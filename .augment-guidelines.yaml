# Dukat: Open Source AI Assistant v0.3.1
# Guidelines for building a self-improving AI assistant with DSPy

# Core Principles
- Open Source: Use only open source models and packages
- Local-First: Run everything locally without external API dependencies
- Self-Improving: Implement mechanisms to learn and improve over time
- Quality-Focused: Prioritize automated testing, documentation, and code quality
- Asynchronous: Leverage async processing for responsive performance
- Modular: Build with a plugin architecture for extensibility

# Key Documentation Files
- README.md: Project overview and getting started guide
- PLANNING.md: Development roadmap and architecture
- TASKS.md: Current development tasks and progress
- TESTING.md: Testing approach, coverage, and next steps

# Technology Stack
- Core Framework: DSPy for LLM programming and optimization
- Model Hosting: Ollama for local model inference
- Vector Storage: ChromaDB/FAISS for knowledge and memory
- Development: Poetry, Pytest, Sphinx, Black, Ruff, Mypy, Pre-commit
- Interface: Gradio/Streamlit (web), Rich (terminal)

# Current Development Focus
1. Integrate task queue system with assistant
2. Enhance web interface with plugin management
3. Implement conversation visualization
4. Improve error handling and resilience
5. Add circuit breakers for external dependencies

# Code Quality Standards
- Documentation: Google-style docstrings with type hints
- Testing: >90% test coverage with unit, integration, and e2e tests
- Linting: Black for formatting, Ruff for linting, Mypy for type checking
- Pre-commit: Automated checks for all code changes

# Development Workflow
- Documentation-Driven: Document interfaces before implementation
- Test-Driven Development: Write tests before implementation
- Implementation Loop: Implement code, test, and document iteratively
- Regular Optimization: Periodically optimize prompts and weights
- Adapt Tests to Code: Adjust tests to match code capabilities rather than downgrading code to pass tests

# Completed Milestones
1. Basic memory systems (working, episodic, semantic)
2. Plugin architecture foundation
3. CLI interface with basic commands
4. Async task queue system for background processing
5. Web interface with Gradio
6. Comprehensive test suite for core components

# Last Updated: 2025-04-24
