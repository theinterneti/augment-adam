name: CI

on:
  push:
    branches: [ main, feature/*, release/* ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install --with dev
        pip install black isort flake8 mypy

    - name: Check code formatting with Black
      run: black --check augment_adam tests

    - name: Check imports with isort
      run: isort --check augment_adam tests

    - name: Lint with flake8
      run: flake8 augment_adam tests

    - name: Type check with mypy
      run: mypy augment_adam

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install --with dev

    - name: Install additional dependencies
      run: |
        pip install pytest-cov neo4j

    - name: Run unit tests
      run: python scripts/run_tests.py tests/unit -v --coverage

    - name: Upload coverage report
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install --with dev

    - name: Install additional dependencies
      run: |
        pip install pytest-cov neo4j

    - name: Run integration tests
      run: python scripts/run_tests.py tests/integration -v

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    if: github.event_name == 'pull_request'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install --with dev

    - name: Install additional dependencies
      run: |
        pip install pytest-cov neo4j

    - name: Run performance tests
      run: python scripts/run_tests.py tests/performance -v

  compatibility-tests:
    name: Compatibility Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    if: github.event_name == 'pull_request'

    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install --with dev

    - name: Install additional dependencies
      run: |
        pip install pytest-cov neo4j

    - name: Run compatibility tests
      run: python scripts/run_tests.py tests/compatibility -v

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: github.event_name == 'push' && (startsWith(github.ref, 'refs/heads/release/') || github.ref == 'refs/heads/main')

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry

    - name: Build package
      run: poetry build

    - name: Check package
      run: twine check dist/*

    - name: Upload package artifact
      uses: actions/upload-artifact@v3
      with:
        name: package
        path: dist/
