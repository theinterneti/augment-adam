# Augment Guidelines for Context Engine

# Memory System Guidelines
memory_system:
  # Vector Storage Guidelines
  vector_storage:
    # Prefer Redis for real-time vector similarity search
    primary: redis
    # Use Neo4j for graph-aware vector search
    secondary: neo4j
    # Embedding model to use
    embedding_model: all-MiniLM-L6-v2
    # Vector dimensions
    dimensions: 384
    # Similarity metric to use
    similarity_metric: cosine
    # Index algorithm
    index_algorithm: hnsw
    # Index parameters
    index_parameters:
      m: 16
      ef_construction: 200
      ef_runtime: 10

  # Tiered Memory Guidelines
  tiered_memory:
    # Hot tier for real-time queries
    hot:
      storage: redis
      ttl: null # No expiration
      priority: high
    # Warm tier for background tasks
    warm:
      storage: redis
      ttl: 86400 # 24 hours
      priority: medium
    # Cold tier for complex queries
    cold:
      storage: neo4j
      ttl: null # No expiration
      priority: low

  # Asynchronous Processing Guidelines
  async_processing:
    # Worker concurrency
    concurrency: 4
    # Task queue
    task_queue: context_engine:tasks
    # Task types
    task_types:
      - index_code
      - update_knowledge_graph
      - sync_vectors
      - prune_vectors
    # Task priorities
    task_priorities:
      - high
      - medium
      - low

# Code Indexing Guidelines
code_indexing:
  # Languages to index
  languages:
    - python
    - javascript
    - typescript
    - java
    - go
    - rust
    - c
    - cpp
  # Code parsing strategy
  parsing_strategy: ast
  # Indexing levels
  indexing_levels:
    - file
    - function
    - class
    - code_block
  # Metadata to extract
  metadata:
    - file_path
    - language
    - imports
    - dependencies
    - function_name
    - class_name
    - docstring
    - parameters
    - return_type

# Query Processing Guidelines
query_processing:
  # Query routing strategy
  routing_strategy: hybrid
  # Query caching
  caching:
    enabled: true
    ttl: 3600 # 1 hour
  # Result merging
  result_merging:
    strategy: weighted
    weights:
      vector_similarity: 0.7
      graph_relevance: 0.3
  # Result ranking
  result_ranking:
    strategy: combined
    factors:
      - similarity_score
      - recency
      - popularity
      - relevance

# Integration Guidelines
integration:
  # API endpoints
  api:
    base_url: http://localhost:8080
    endpoints:
      - /search
      - /graph-search
      - /store
  # MCP integration
  mcp:
    base_url: http://localhost:8080/mcp
    tools:
      - vector_search
      - vector_store
      - code_index
      - create_relationship
      - get_related_vectors
    authentication:
      method: oauth2
      scopes:
        - read:vectors
        - write:vectors
        - read:graph
        - write:graph
  # Client libraries
  client_libraries:
    - python
    - javascript
  # Authentication
  authentication:
    method: api_key
    header: X-API-Key

# Performance Guidelines
performance:
  # Redis configuration
  redis:
    max_memory: 6gb
    max_memory_policy: allkeys-lru
    io_threads: 2
    threads: 6
  # Neo4j configuration
  neo4j:
    heap_initial_size: 1G
    heap_max_size: 4G
    pagecache_size: 2G
    transaction_concurrent_maximum: 32
  # API configuration
  api:
    workers: 4
    timeout: 30
  # Worker configuration
  worker:
    concurrency: 4
    batch_size: 100

# Development Guidelines
development:
  # Docker configuration
  docker:
    use_existing: true
    build_custom: false
  # Testing
  testing:
    unit_tests: true
    integration_tests: true
    performance_tests: true
  # Documentation
  documentation:
    api_docs: true
    architecture_docs: true
    examples: true
